name: Deploy (production)
run-name: Deploy to ${{ github.event.inputs.environment }} core=${{ github.event.inputs.core-image-tag }} country config=${{ github.event.inputs.countryconfig-image-tag }}
on:
  workflow_dispatch:
    inputs:
      environment:
        type: choice
        description: Environment to deploy to
        required: true
        default: 'staging'
        options:
          - production
          - staging
      core-image-tag:
        description: Core DockerHub image tag
        required: true
        default: 'v1.7.2'
      countryconfig-image-tag:
        description: Your Country Config DockerHub image tag
        required: true

jobs:
  deploy:
    environment: ${{ github.event.inputs.environment }}
    runs-on: ubuntu-22.04
    timeout-minutes: 60
    steps:
      - uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: rochel07,solomcfly
          minimum-approvals: 1
          issue-title: 'Deploy (${{ github.event.inputs.environment }}): core: ${{ github.event.inputs.core-image-tag }} country config: ${{ github.event.inputs.countryconfig-image-tag }}'
          issue-body: 'Please approve or deny the deployment of core: ${{ github.event.inputs.core-image-tag }} country config: ${{ github.event.inputs.countryconfig-image-tag }} to ${{ github.event.inputs.environment }}'
          exclude-workflow-initiator-as-approver: false
      - name: Set ENV_VAR dynamically
        run: echo "ENV_VAR=ENV_${{ github.event.inputs.environment }}" >> $GITHUB_ENV

      - name: Create .env file
        run: |
          echo "${{ vars[env.ENV_VAR] }}" | sed 's/[[:space:]]*$//' | awk -F= '{print $1 "=\"" $2 "\""}' > .env.${{ github.event.inputs.environment }}

      - name: Load environment variables
        run: |
          set -a
          source .env.${{ github.event.inputs.environment }}
          set +a

      - name: Charger les variables autrement
        run: |
          while IFS= read -r line; do
            if [[ ! -z "$line" && "$line" != \#* ]]; then
              line=$(echo "$line" | sed -E 's/^([^=]+)="(.*)"$/\1=\2/')
              export "$line"
              echo "$line" >> $GITHUB_ENV
            fi
          done < .env.${{ github.event.inputs.environment }}

      - name: Clone core
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          repository: 'digital-gov-mg/opencrvs-core'
          path: './opencrvs-core'
      - name: Clone country config resource package
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          path: './${{ github.event.repository.name }}'

      - name: Checkout country branch
        run: |
          cd ${{ github.event.repository.name }}
          git checkout ${{ github.event.inputs.countryconfig-image-tag }}
          cd ../

      - name: Checkout core branch
        run: |
          cd opencrvs-core
          git checkout ${{ github.event.inputs.core-image-tag }}

      - name: Read known hosts
        run: |
          cd ${{ github.event.repository.name }}
          echo "KNOWN_HOSTS<<EOF" >> $GITHUB_ENV
          sed -i -e '$a\' ./infrastructure/known-hosts
          cat ./infrastructure/known-hosts >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Install SSH Key for Prod
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_KEY_PROD }}
          known_hosts: ${{ env.KNOWN_HOSTS }}
        if: ${{ github.event.inputs.environment == 'production' }}

      - name: Unset KNOWN_HOSTS variable
        run: |
          echo "KNOWN_HOSTS=" >> $GITHUB_ENV

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Wait for images to be available
        run: |
          while true; do
            if docker manifest inspect siecm/ocrvs-auth:${{ github.event.inputs.core-image-tag }}; then
              break
            fi
            sleep 10
          done
          while true; do
            if docker manifest inspect ${{ secrets.DOCKERHUB_ACCOUNT }}/${{ secrets.DOCKERHUB_REPO }}:${{ github.event.inputs.countryconfig-image-tag }}; then
              break
            fi
            sleep 10
          done

      - name: Deploy to ${{ github.event.inputs.environment }}
        run: |
          export DOCKER_USERNAME="${{ secrets.DOCKER_USERNAME }}"
          export DOCKER_TOKEN="${{ secrets.DOCKER_TOKEN }}"
          cd ./${{ github.event.repository.name }}
          yarn deploy \
          --clear_data=no \
          --environment=${{ github.event.inputs.environment }} \
          --host=$DOMAIN \
          --ssh_host=$SSH_HOST \
          --ssh_port=$SSH_PORT \
          --ssh_user=$SSH_USER \
          --version=${{ github.event.inputs.core-image-tag }} \
          --country_config_version=${{ github.event.inputs.countryconfig-image-tag }} \
          --replicas=$REPLICAS
