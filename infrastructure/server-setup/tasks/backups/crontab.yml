- name: Set environment variables in crontab
  become: yes
  cron:
    name: '{{ item.name }}'
    env: yes
    job: '{{ item.value }}'
    user: '{{ crontab_user }}'
    state: "{{ 'present' if (external_backup_server_ip is defined and backup_encryption_passphrase and (enable_backups | default(false))) else 'absent' }}"
  loop:
    - { name: 'MONGODB_ADMIN_PASSWORD', value: '{{ mongodb_admin_password }}' }
    - { name: 'MONGODB_ADMIN_USER', value: '{{ mongodb_admin_username }}' }
    - {
        name: 'ELASTICSEARCH_ADMIN_PASSWORD',
        value: '{{ elasticsearch_superuser_password }}'
      }
    - { name: 'ELASTICSEARCH_ADMIN_USER', value: 'elastic' }

- name: 'Setup crontab to backup the opencrvs data'
  cron:
    user: '{{ crontab_user }}'
    name: 'backup opencrvs'
    minute: '0'
    hour: '0'
    job: 'cd / && bash /opt/opencrvs/infrastructure/backups/backup.sh --passphrase={{ backup_encryption_passphrase }} --ssh_user={{ external_backup_server_user }} --ssh_host={{ external_backup_server_ip }} --ssh_port={{ external_backup_server_ssh_port }} --production_ip={{ manager_production_server_ip }} --remote_dir={{ external_backup_server_remote_directory }} --replicas=1 >> /var/log/opencrvs-backup.log 2>&1'
    state: "{{ 'present' if (external_backup_server_ip is defined and backup_encryption_passphrase and (enable_backups | default(false))) else 'absent' }}"

##
# For machines that periodically restore from backup (staging)
##

- name: Set default value for periodic_restore_from_backup
  set_fact:
    periodic_restore_from_backup: false
  when: periodic_restore_from_backup is not defined

- name: Throw an error if periodic_restore_from_backup is true but backup_encryption_passphrase is not defined
  fail:
    msg: 'Error: backup_encryption_passphrase is not defined. It usually means you have not set backup_encryption_passphrase in your staging environments secrets'
  when: periodic_restore_from_backup and backup_encryption_passphrase is not defined

- name: 'Setup crontab to download a backup periodically the opencrvs data'
  cron:
    user: '{{ crontab_user }}'
    name: 'download opencrvs backup'
    minute: '30'
    hour: '0'
    job: 'cd / && bash /opt/opencrvs/infrastructure/backups/download.sh --passphrase={{ backup_encryption_passphrase }} --ssh_user={{ external_backup_server_user }} --ssh_host={{ external_backup_server_ip }} --ssh_port={{ external_backup_server_ssh_port }} --remote_dir={{ external_backup_server_remote_directory }} >> /var/log/opencrvs-restore.log 2>&1'
    state: "{{ 'present' if (external_backup_server_ip is defined and backup_encryption_passphrase and periodic_restore_from_backup) else 'absent' }}"

- name: 'Setup crontab to restore the opencrvs data'
  cron:
    user: '{{ crontab_user }}'
    name: 'restore opencrvs'
    minute: '0'
    hour: '1'
    job: 'cd / && bash /opt/opencrvs/infrastructure/backups/restore.sh --replicas=1 >> /var/log/opencrvs-restore.log 2>&1'
    state: "{{ 'present' if (external_backup_server_ip is defined and backup_encryption_passphrase and periodic_restore_from_backup) else 'absent' }}"

- name: 'Setup backup rotation'
  cron:
    user: '{{ crontab_user }}'
    name: 'rotate backups'
    minute: '0'
    hour: '0'
    job: 'cd / && bash rotate_backups.sh --backup_dir=/home/backup/backups --amount_to_keep={{ amount_of_backups_to_keep }} >> /var/log/opencrvs-rotate-backups.log 2>&1'
    state: "{{ 'present' if (amount_of_backups_to_keep) else 'absent' }}"
